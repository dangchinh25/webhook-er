version: 2.1

jobs:
  unit-tests:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "src/db/schema.ts" }}
      - run:
          name: Install Dependencies
          command: npm i
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "src/db/schema.ts" }}
          paths:
            - node_modules
      - run:
          name: Run Unit Tests
          command: npm run test:unit
      - store_artifacts:
          path: jest/coverage/unitTests

  integration-tests:
    machine: 
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Configure NodeJS
          command: |
            nvm install 16.15.0
            node -v
      - run:
          name: Install Dependencies
          command: npm i
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "src/db/schema.ts" }}
          paths:
            - node_modules
      - run:
          name: Set Database Environment Variables
          command: |
            echo "POSTGRES_DB=webhook_er" >> .env
            echo "POSTGRES_HOST=127.0.0.1" >> .env
            echo "POSTGRES_PASSWORD=123456789" >> .env
            echo "POSTGRES_PORT=5432" >> .env
            echo "POSTGRES_USER=cleAdmin" >> .env

            echo "DATABASE_URL=postgresql://cleAdmin:123456789@127.0.0.1:5432/webhook_er" >> .env

            cat .env
      - run:
          name: Create Empty Temporary Database & Docker Compose
          command: |
            npm run temp-database-up
      - run:
          name: Migrate database
          command: |
            npm run migrate
      - run:
          name: Run Integration Tests
          command: npm run test:int
      - run:
          name: Drop Temporary Database
          command: npm run temp-database-down
          when: always
      - store_artifacts:
          path: jest/coverage/integrationTests

  database-migration:
    docker:
      - image: cimg/node:16.15.0
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "src/db/schema.ts" }}
      - run:
          name: Install Dependencies
          command: npm i
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}-{{ checksum "src/db/schema.ts" }}
          paths:
            - node_modules
      - run:
          name: Set Database Environment Variables
          command: |
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
            echo "POSTGRES_USER=$POSTGRES_USER" >> .env

            echo "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=require" >> .env
            cat .env
      - run: 
          name: Migrate database
          command: |
            npm run migrate
workflows:
  test-deploy-releases:
    jobs:
      - unit-tests
      - integration-tests:
          context: Webhook-Er
      - database-migration:
          context: Webhook-Er
          requires:
            - unit-tests
            - integration-tests
          filters:
            branches:
              only:
                - main